<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">

	<bean id="to_dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${to.db.mysql.driverClass}" />
		<property name="url" value="${to.db.conn.url}" />
		<property name="username" value="${to.db.conn.userName}" />
		<property name="password" value="${to.db.conn.password}" />
		<property name="defaultAutoCommit" value="${to.db.conn.autocommit}"/>
		<property name="maxActive" value="${to.db.conn.maxActive}"/>
		<property name="maxIdle" value="${to.db.conn.maxIdle}"/>
		<property name="maxWait" value="${to.db.conn.maxWait}"/>

        <!--最小空闲连接数,如果不设置,默认为0 -->
        <property name="minIdle" value="1" />

        <!--初始化连接数,如果不设置,当容器启动后,会随着连接的数量逐个增加-->
        <property name="initialSize" value="1" />

        <!--连接泄漏回收参数,是否自动回收超时连接-->
        <property name="removeAbandoned" value="true" />

        <!--连接泄漏回收参数,泄露的连接可以被删除的超时值,超时时间(以秒数为单位) -->
        <property name="removeAbandonedTimeout" value="180" />

        <!-- 验证使用的SQL语句-->
        <property name="validationQuery" value="SELECT 1" />

        <!-- 指明连接是否被空闲连接回收器(如果有)进行检验,如果检测失败,则连接将被从池中去除 -->
        <property name="testWhileIdle" value="true" />

        <!--借出连接时不要测试,否则很影响性能 -->
        <property name="testOnBorrow" value="false"/>

        <!--每30秒运行一次空闲连接回收器 -->
        <property name="timeBetweenEvictionRunsMillis" value="30000" />

        <!--在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->
        <property name="numTestsPerEvictionRun" value="10"/>

        <!--池中的连接空闲60分钟后被回收 -->
        <property name="minEvictableIdleTimeMillis" value="3600000" />

        <!--被丢弃的数据库连接是否做记录,以便跟踪 -->
        <property name="logAbandoned" value="true" />
	</bean>

	<bean id="to_sqlSessionFactory" name="toSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="to_dataSource" />
		<property name="typeAliasesPackage" value="com.sxc.to.domain.model" />
		<property name="mapperLocations">
			<list>
				<value>classpath:/to-sqlmap/*Mapper.xml</value>
			</list>
		</property>
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageHelper">
                    <!-- 这里的几个配置主要演示如何使用，如果不理解，一定要去掉下面的配置 -->
                    <property name="properties">
                        <value>
                            reasonable=true
                            supportMethodsArguments=true
                            returnPageInfo=check
                            params=count=countSql
                        </value>
                    </property>
                </bean>
            </array>
        </property>
	</bean>

	<!-- scan for mappers and let them be autowired -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.sxc.to.dao.mapper" />
        <property name="sqlSessionFactoryBeanName" value="toSqlSessionFactory"/>
	</bean>

	<!-- 可通过注解控制事务 -->
    <tx:annotation-driven transaction-manager="to_transactionManager"/>
    
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="to_transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="to_dataSource" />
    </bean>
    
    <!-- 配置事务的传播特性 -->
    <tx:advice id="to_txAdvice" transaction-manager="to_transactionManager">
        <tx:attributes>
        	<tx:method name="*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="create*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="add*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception" />
        </tx:attributes>
    </tx:advice>
    <!-- 配置事务的切入点 -->
    <aop:config>
        <aop:pointcut id="to_targetMethod" expression="execution(* com.sxc.to.service.impl.*ServiceImpl.*(..))" />
        <aop:advisor advice-ref="to_txAdvice" pointcut-ref="to_targetMethod" />
    </aop:config>
     
</beans>
